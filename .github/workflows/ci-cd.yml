name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests
        run: mvn test

      - name: Build JAR file
        run: mvn clean package -DskipTests

      - name: Verify JAR file
        run: |
          echo "Checking JAR file..."
          ls -la target/
          if [ -f "target/slack.cab-0.0.1-SNAPSHOT.jar" ]; then
            echo "✅ JAR file found: $(ls -lh target/slack.cab-0.0.1-SNAPSHOT.jar)"
          else
            echo "❌ JAR file not found!"
            exit 1
          fi

      - name: Setup SSH connection
        run: |
          echo "🔧 Setting up SSH connection..."

          # Setup SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add EC2 to known hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          echo "✅ SSH setup completed"

      - name: Test connection and prepare EC2
        run: |
          echo "🔗 Testing connection to EC2..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "✅ Connected to: $(hostname)"
            echo "📍 Current user: $(whoami)"
            echo "📂 Home directory: $HOME"
            echo "💾 Disk space:"
            df -h $HOME
            echo "🔧 Java version:"
            java -version || echo "Java not installed"

            echo "📁 Creating app directory..."
            mkdir -p /home/ec2-user/app
            chmod 755 /home/ec2-user/app
            ls -la /home/ec2-user/app
            echo "✅ Directory ready: /home/ec2-user/app"
          EOF

      - name: Deploy JAR to EC2
        run: |
          echo "📦 Deploying JAR file to EC2..."

          # Copy JAR file using SCP
          echo "🚀 Copying JAR file..."
          scp -o StrictHostKeyChecking=no target/slack.cab-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/app/

          echo "✅ JAR file deployed successfully!"

      - name: Verify deployment and stop existing application
        run: |
          echo "🔍 Verifying deployment..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            ls -la /home/ec2-user/app/

            if [ -f "/home/ec2-user/app/slack.cab-0.0.1-SNAPSHOT.jar" ]; then
              echo "✅ JAR file deployed successfully"
              echo "📊 JAR file size: $(du -h /home/ec2-user/app/slack.cab-0.0.1-SNAPSHOT.jar)"
            else
              echo "❌ JAR file not found after deployment!"
              exit 1
            fi

            echo "🛑 Stopping existing application..."
            pkill -f "slack.cab.*jar" || echo "No existing application found"
            sleep 3
          EOF

      - name: Start application on EC2
        run: |
          echo "🚀 Starting application on EC2..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/app

            echo "🚀 Starting application..."
            chmod +x slack.cab-0.0.1-SNAPSHOT.jar

            # Start application in background
            nohup java -jar slack.cab-0.0.1-SNAPSHOT.jar > app.log 2>&1 &

            echo "⏳ Waiting for application to start..."
            sleep 15

            # Check if application started successfully
            if pgrep -f "slack.cab.*jar" > /dev/null; then
              echo "✅ Application started successfully!"
              echo "📋 Process ID: $(pgrep -f 'slack.cab.*jar')"

              # Check if port 8080 is listening
              if netstat -tlnp 2>/dev/null | grep -q :8080; then
                echo "🌐 Application is listening on port 8080"
                echo "🔗 Access your app at: http://$(curl -s ifconfig.me):8080"
              else
                echo "⚠️  Port 8080 not yet bound, application may still be starting..."
              fi

              echo "📄 Last 10 lines of log:"
              tail -10 app.log
            else
              echo "❌ Failed to start application!"
              echo "📄 Application logs:"
              cat app.log
              exit 1
            fi
          EOF